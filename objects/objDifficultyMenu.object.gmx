<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initiailze menu variables

difSelect = false;
select = global.menuSelectPrev[0];
select2 = 0;
select3 = 1;
xSeperation = 239;
str[0] = "SAVE GAME 1";
str[1] = "SAVE GAME 2";
str[2] = "SAVE GAME 3";
warnText = false;
warnSelect = true;

appleIndex = 0;
playerIndex = 0;
arrowIndex = 0;

//load save file values

for (var i = 0; i &lt; 3; i++)
{
    if (file_exists("Data\save"+string(i+1)))  //check if current save exists
    {
        //load save data
        exists[i] = true;
        
        //load the save map
        var saveMap;
        
        if (global.extraSaveProtection) //use ds_map_secure function
        {
            saveMap = ds_map_secure_load("Data\save"+string(i+1));
        }
        else    //use text file
        {
            var f = file_text_open_read("Data\save"+string(i+1));
            
            saveMap = json_decode(base64_decode(file_text_read_string(f)));
            
            file_text_close(f);
        }
        
        if (saveMap != -1)  //check if the save map loaded correctly
        {
            death[i] = ds_map_find_value(saveMap,"death");
            if (is_undefined(death[i])) //check for undefined value in case the save was messed with or got corrupted
                death[i] = 0;
            
            time[i] = ds_map_find_value(saveMap,"time");
            if (is_undefined(time[i]))
                time[i] = 0;
    
            difficulty[i] = ds_map_find_value(saveMap,"difficulty");
            if (is_undefined(difficulty[i]))
                difficulty[i] = 0;
            
            for (var j = 0; j &lt; 8; j++)
            {
                boss[j,i] = ds_map_find_value(saveMap,"saveBossItem["+string(j)+"]");
                if (is_undefined(boss[j,i]))
                    boss[j,i] = false;
            }
            
            clear[i] = ds_map_find_value(saveMap,"saveGameClear");
            if (is_undefined(clear[i]))
                clear[i] = false;
            
            ds_map_destroy(saveMap);
        }
        else
        {
            //save map didn't load correctly, set the variables to the defaults
            death[i] = 0;
            time[i] = 0;
            difficulty[i] = 0;
            for (var j = 0; j &lt; 8; j++)
            {
                boss[j,i] = false;
            }
            clear[i] = false;
        }
    }
    else
    {
        exists[i] = false;
        death[i] = 0;
        time[i] = 0;
    }
    //load screenshot
    if (file_exists("Data\save"+string(i+1)+".png"))
    {
        screen[i] = sprite_add("Data\save"+string(i+1)+".png",0,0,0,0,0);
    }
    else screen[i] = -1;
    
    var t = time[i];
    show_debug_message(t);
    timeStr[i] = string(t div 3600) + ":";
    t = t mod 3600;
    timeStr[i] += string(t div 600);
    t = t mod 600;
    timeStr[i] += string(t div 60) + ":";
    t = t mod 60;
    timeStr[i] += string(t div 10);
    t = t mod 10;
    timeStr[i] += string(floor(t));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//animate select sprites
appleIndex = (appleIndex + 1/15) mod 2;
playerIndex = (playerIndex + 1/5) mod 4;
arrowIndex = (arrowIndex + 1/2) mod 6;

if (!difSelect)
{
    if (scrButtonCheckPressed(global.menuLeftButton))
    {
        select -= 1;
        if (select &lt; 0)
            select = 2;
    }
    else if (scrButtonCheckPressed(global.menuRightButton))
    {
        select += 1;
        if (select &gt; 2)
            select = 0;
    }
    
    else if (scrButtonCheckPressed(global.menuAcceptButton))
    {
        select2 = 0;
        difSelect = true;
    }
}
else
{
    if (scrButtonCheckPressed(global.menuBackButton))
    {
        difSelect = false;
        select3 = 1;
    }
    else if (scrButtonCheckPressed(global.menuUpButton) or scrButtonCheckPressed(global.menuDownButton))
    {
        select2 = !select2;
    }
    
    if (select2 == 1)
    {
        //choose a difficulty
        if (scrButtonCheckPressed(global.menuLeftButton) and select3 != 0)
        {
            select3 -= 1;
            if (select3 &lt; 0)
                select3 = 3;
        }
        else if (scrButtonCheckPressed(global.menuRightButton) and select3 != 3)
        {
            select3 += 1;
            if (select3 &gt; 3)
                select3 = 0;
        }
        else if(scrButtonCheckPressed(global.menuAcceptButton))
        {
            //start new game
            global.gameStarted = true; //sets game in progress (enables saving, restarting, etc.)
            global.autosave = true;
            
            global.difficulty = select3;
            
            if(file_exists("Data\save"+string(global.savenum)))
                file_delete("Data\save"+string(global.savenum));
        
            room_goto(global.startRoom);
        }
    }
    else { //load game
        if(scrButtonCheckPressed(global.menuAcceptButton))
        {
            if (file_exists("Data\save"+string(global.savenum)))
                scrLoadGame(true);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; 3; i++)
{
    if (sprite_exists(screen[i])) sprite_delete(screen[i]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw top outline
scrDrawRectangleOutline(256,32,544,64,c_gray,1);


//draw bright block
draw_sprite(sprMenu6,0,x-32+xSeperation*select,y-32)

for(var i = 0; i &lt; 3; i += 1)
{
    draw_set_color(c_white)
    
    draw_set_halign(fa_center);
    draw_set_font(fDefault14);
    draw_text(400,32,"*Select Your Saved Game*")
    
    draw_set_halign(fa_center)
    draw_set_font(fDefault12);
    draw_text(x+i*xSeperation+64,y+4,str[i]);
    
    draw_set_font(fDefault10);
    draw_set_halign(fa_left);
    
    //new game picture
    if (!difSelect or i != select)
    {
        if (screen[i] != -1) {
            if (i != select) {
                shader_set(shdBlackWhite);
                draw_sprite_stretched(screen[i], 0, x+i*xSeperation, y+32, 128, 96);
                shader_reset();
            }
            else {
                draw_sprite_stretched(screen[i], 0, x+i*xSeperation, y+32, 128, 96);
            }
        }
        else
            draw_sprite(sprMenuNewGame,0,x+i*xSeperation,y+32);
    }
    else
    {
        draw_set_font(fArial10);
        draw_text(x+xSeperation*i+33,y+40,"Continue");
        draw_text(x+xSeperation*i+33,y+72,"New Game");
        //difficulty info
        draw_set_halign(fa_center)
        draw_set_font(fItalic9);
        
        var difStr = "";
        switch (select3) {
            case 1: difStr = "&lt;-(Hard)"; break;
            case 2: difStr = "&lt;-(Very Hard)"; break;
            case 3: difStr = "&lt;-(Impossible)"; break;
            case 0: difStr = "&lt;-(Medium)"; break;
        }
        if (select3 != 3) difStr += "-&gt;";
        draw_text(x+xSeperation*i+80,y+88,difStr);
        //arrow
        draw_sprite(sprIntroArrow,arrowIndex,x+xSeperation*i+8,y+32+select2*32+8)
        //outline
        scrDrawRectangleOutline(x+xSeperation*i+32,y+32,x+xSeperation*i+128,y+64,c_gray,1);
        scrDrawRectangleOutline(x+xSeperation*i+32,y+64,x+xSeperation*i+128,y+112,c_gray,1);
    }
    
    draw_set_halign(fa_left);    
    draw_set_font(fDefault10);
    
    draw_text(x+i*xSeperation,y+132,"Playtime: "+timeStr[i]);
    draw_text(x+i*xSeperation,y+164,"Deaths: "+string(death[i]));

    if (difSelect &amp;&amp; i == select)
    {

    }
    
    if (exists[i])
    {        
        if(difficulty[i]==0){draw_text(x+i*xSeperation,y+196,"Difficulty: Medium")}
        else if(difficulty[i]==1){draw_text(x+i*xSeperation,y+196,"Difficulty: Hard")}
        else if(difficulty[i]==2){draw_text(x+i*xSeperation,y+196,"Difficulty: Very Hard")}
        else if(difficulty[i]==3){draw_text(x+i*xSeperation,y+196,"Difficulty: Impossible")}
        
        draw_set_font(fDefault10);
        
        if(clear[i]){draw_text(x+i*xSeperation+63,y+215,"Clear!!")}
        
        if(boss[0,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+0,y+128)}
        if(boss[1,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+32,y+128)}
        if(boss[2,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+64,y+128)}
        if(boss[3,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+96,y+128)}
        if(boss[4,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+0,y+160)}
        if(boss[5,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+32,y+160)}
        if(boss[6,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+64,y+160)}
        if(boss[7,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+96,y+160)}
    }
    else
    {
        draw_text(x+i*xSeperation,y+196,"Difficulty: ");
    }
    
    //draw outline
    var xp = (i == 1) * 2;
    scrDrawRectangleOutline(x+(xSeperation+1)*i-1,160,x+(xSeperation+1)*i+128+xp,192,c_gray,1);
    for (var j = 0; j &lt; 4; j++) { //124
        scrDrawRectangleOutline(x+(xSeperation+1)*i-1,y+128,x+(xSeperation+1)*i+128+xp,y+128+j*32,c_gray,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
